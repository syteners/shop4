# - *- coding: utf- 8 - *-
from aiogram import Router, Bot, F
from aiogram.filters import StateFilter
from aiogram.types import CallbackQuery, Message

from tgbot.database.db_settings import Settingsx
from tgbot.database.db_users import Userx
from tgbot.keyboards.inline_admin import turn_open_finl, settings_open_finl, stars_markup_finl
from tgbot.utils.misc.bot_models import FSM, ARS
from tgbot.utils.misc_functions import send_admins, insert_tags

router = Router(name=__name__)


# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
@router.message(F.text == "üñç –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
async def settings_data_edit(message: Message, bot: Bot, state: FSM, arSession: ARS):
    await state.clear()

    await message.answer(
        "<b>üñç –ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞.</b>",
        reply_markup=settings_open_finl(),
    )


# –í—ã–∫–ª—é—á–∞—Ç–µ–ª–∏ –±–æ—Ç–∞
@router.message(F.text == "üïπ –í—ã–∫–ª—é—á–∞—Ç–µ–ª–∏")
async def settings_turn_edit(message: Message, bot: Bot, state: FSM, arSession: ARS):
    await state.clear()

    await message.answer(
        "<b>üïπ –í–∫–ª—é—á–µ–Ω–∏–µ –∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π</b>",
        reply_markup=turn_open_finl(),
    )


################################## –í–´–ö–õ–Æ–ß–ê–¢–ï–õ–ò #################################
# –í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ—Ö —Ä–∞–±–æ—Ç
@router.callback_query(F.data.startswith("turn_work:"))
async def settings_turn_work(call: CallbackQuery, bot: Bot, state: FSM, arSession: ARS):
    get_status = call.data.split(":")[1]

    get_user = Userx.get(user_id=call.from_user.id)
    Settingsx.update(status_work=get_status)

    if get_status == "True":
        send_text = "üî¥ –û—Ç–ø—Ä–∞–≤–∏–ª –±–æ—Ç–∞ –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã."
    else:
        send_text = "üü¢ –í—ã–≤–µ–ª –±–æ—Ç–∞ –∏–∑ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–∞–±–æ—Ç."

    await send_admins(
        bot,
        f"üë§ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä <a href='tg://user?id={get_user.user_id}'>{get_user.user_name}</a>\n"
        f"{send_text}",
        not_me=get_user.user_id,
    )

    await call.message.edit_reply_markup(reply_markup=turn_open_finl())


# –í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–∫—É–ø–æ–∫
@router.callback_query(F.data.startswith("turn_buy:"))
async def settings_turn_buy(call: CallbackQuery, bot: Bot, state: FSM, arSession: ARS):
    get_status = call.data.split(":")[1]

    get_user = Userx.get(user_id=call.from_user.id)
    Settingsx.update(status_buy=get_status)

    if get_status == "True":
        send_text = "üü¢ –í–∫–ª—é—á–∏–ª –ø–æ–∫—É–ø–∫–∏ –≤ –±–æ—Ç–µ."
    else:
        send_text = "üî¥ –í—ã–∫–ª—é—á–∏–ª –ø–æ–∫—É–ø–∫–∏ –≤ –±–æ—Ç–µ."

    await send_admins(
        bot,
        f"üë§ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä <a href='tg://user?id={get_user.user_id}'>{get_user.user_name}</a>\n"
        f"{send_text}",
        not_me=get_user.user_id,
    )

    await call.message.edit_reply_markup(reply_markup=turn_open_finl())


# –í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π
@router.callback_query(F.data.startswith("turn_pay:"))
async def settings_turn_pay(call: CallbackQuery, bot: Bot, state: FSM, arSession: ARS):
    get_status = call.data.split(":")[1]

    get_user = Userx.get(user_id=call.from_user.id)
    Settingsx.update(status_refill=get_status)

    if get_status == "True":
        send_text = "üü¢ –í–∫–ª—é—á–∏–ª –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –±–æ—Ç–µ."
    else:
        send_text = "üî¥ –í—ã–∫–ª—é—á–∏–ª –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –±–æ—Ç–µ."

    await send_admins(
        bot,
        f"üë§ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä <a href='tg://user?id={get_user.user_id}'>{get_user.user_name}</a>\n"
        f"{send_text}",
        not_me=get_user.user_id,
    )

    await call.message.edit_reply_markup(reply_markup=turn_open_finl())


# –í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "–ö—É–ø–∏—Ç—å –∑–≤–µ–∑–¥—ã"
@router.callback_query(F.data.startswith("turn_stars_buy:"))
async def settings_turn_stars_buy(call: CallbackQuery, bot: Bot, state: FSM, arSession: ARS):
    get_status = call.data.split(":")[1]

    get_user = Userx.get(user_id=call.from_user.id)
    Settingsx.update(status_stars_buy=get_status)

    if get_status == "True":
        send_text = "üü¢ –í–∫–ª—é—á–∏–ª –∫–Ω–æ–ø–∫—É '–ö—É–ø–∏—Ç—å –∑–≤–µ–∑–¥—ã' –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é."
    else:
        send_text = "üî¥ –í—ã–∫–ª—é—á–∏–ª –∫–Ω–æ–ø–∫—É '–ö—É–ø–∏—Ç—å –∑–≤–µ–∑–¥—ã' –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é."

    await send_admins(
        bot,
        f"üë§ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä <a href='tg://user?id={get_user.user_id}'>{get_user.user_name}</a>\n"
        f"{send_text}",
        not_me=get_user.user_id,
    )

    await call.message.edit_reply_markup(reply_markup=turn_open_finl())


############################### –ò–ó–ú–ï–ù–ï–ù–ò–ï –î–ê–ù–ù–´–• ###############################
# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
@router.callback_query(F.data == "settings_edit_support")
async def settings_support_edit(call: CallbackQuery, bot: Bot, state: FSM, arSession: ARS):
    await state.clear()

    await state.set_state("here_settings_support")
    await call.message.edit_text(
        "<b>‚òéÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —é–∑–µ—Ä–Ω–µ–π–º –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏.</b>\n"
        "‚ùï –Æ–∑–µ—Ä–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è/–±–æ—Ç–∞/–∫–∞–Ω–∞–ª–∞/—á–∞—Ç–∞.",
    )


# –ò–∑–º–µ–Ω–µ–Ω–∏–µ FAQ
@router.callback_query(F.data == "settings_edit_faq")
async def settings_faq_edit(call: CallbackQuery, bot: Bot, state: FSM, arSession: ARS):
    await state.clear()

    await state.set_state("here_settings_faq")
    await call.message.edit_text(
        "<b>‚ùî –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è FAQ</b>\n"
        "‚ùï –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–∞–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –∏ HTML —Ä–∞–∑–º–µ—Ç–∫—É:\n"
        "‚ñ∂Ô∏è <code>{username}</code>  - –ª–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞–ª—è\n"
        "‚ñ∂Ô∏è <code>{user_id}</code>   - –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        "‚ñ∂Ô∏è <code>{firstname}</code> - –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
    )


################################ –ü–†–ò–ù–Ø–¢–ò–ï –î–ê–ù–ù–´–• ###############################
# –ü—Ä–∏–Ω—è—Ç–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
@router.message(F.text, StateFilter("here_settings_support"))
async def settings_support_get(message: Message, bot: Bot, state: FSM, arSession: ARS):
    get_support = message.text

    if get_support.startswith("@"):
        get_support = get_support[1:]

    await state.clear()

    Settingsx.update(misc_support=get_support)

    await message.answer(
        "<b>üñç –ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞.</b>",
        reply_markup=settings_open_finl(),
    )


# –ü—Ä–∏–Ω—è—Ç–∏–µ FAQ
@router.message(F.text, StateFilter("here_settings_faq"))
async def settings_faq_get(message: Message, bot: Bot, state: FSM, arSession: ARS):
    get_message = insert_tags(message.from_user.id, message.text)

    try:
        await (await message.answer(get_message)).delete()
    except:
        return await message.answer(
            "<b>‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ HTML.</b>\n"
            "‚ùî –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è FAQ",
        )

    await state.clear()
    Settingsx.update(misc_faq=message.text)

    await message.answer(
        "<b>üñç –ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞.</b>",
        reply_markup=settings_open_finl(),
    )


################################################################################
############################### –ù–ê–¶–ï–ù–ö–ê –ù–ê –ó–í–ï–ó–î–´ ##############################
# –ù–∞—Ü–µ–Ω–∫–∞ –Ω–∞ –∑–≤–µ–∑–¥—ã
@router.message(F.text == "‚≠ê –ù–∞—Ü–µ–Ω–∫–∞ –Ω–∞ –∑–≤–µ–∑–¥—ã")
async def stars_markup_menu(message: Message, bot: Bot, state: FSM, arSession: ARS):
    await state.clear()

    get_settings = Settingsx.get()

    await message.answer(
        f"<b>‚≠ê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞—Ü–µ–Ω–∫–∏ –Ω–∞ –∑–≤–µ–∑–¥—ã Telegram</b>\n"
        f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
        f"‚ñ™Ô∏è –¢–µ–∫—É—â–∞—è –Ω–∞—Ü–µ–Ω–∫–∞: <code>{get_settings.stars_markup}%</code>\n"
        f"‚ñ™Ô∏è –ü—Ä–∏ –ø–æ–∫—É–ø–∫–µ –∑–≤–µ–∑–¥, –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–∞—Ü–µ–Ω–∫—É –∫ —Å—Ç–æ–∏–º–æ—Å—Ç–∏\n"
        f"‚ñ™Ô∏è –†–∞–∑–Ω–∏—Ü–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –Ω–∞ –±–∞–ª–∞–Ω—Å–µ CryptoBot –∫–∞–∫ –≤–∞—à–∞ –∫–æ–º–∏—Å—Å–∏—è\n"
        f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
        f"<i>–ü—Ä–∏–º–µ—Ä: –ø—Ä–∏ –Ω–∞—Ü–µ–Ω–∫–µ 10%, –µ—Å–ª–∏ –∑–≤–µ–∑–¥—ã —Å—Ç–æ—è—Ç 100$, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø–ª–∞—Ç–∏—Ç 110$</i>",
        reply_markup=stars_markup_finl(),
    )


# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Ü–µ–Ω–∫–∏ –Ω–∞ –∑–≤–µ–∑–¥—ã
@router.callback_query(F.data == "stars_markup_edit")
async def stars_markup_edit(call: CallbackQuery, bot: Bot, state: FSM, arSession: ARS):
    await state.set_state("here_stars_markup")
    await call.message.edit_text(
        "<b>‚≠ê –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –Ω–∞—Ü–µ–Ω–∫–∏ –Ω–∞ –∑–≤–µ–∑–¥—ã</b>\n"
        "‚ñ™Ô∏è –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100\n"
        "‚ñ™Ô∏è –ü—Ä–∏–º–µ—Ä: <code>10</code> - –Ω–∞—Ü–µ–Ω–∫–∞ 10%\n"
        "‚ñ™Ô∏è <code>0</code> - –±–µ–∑ –Ω–∞—Ü–µ–Ω–∫–∏ (–Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)",
    )


# –ü—Ä–∏–Ω—è—Ç–∏–µ –Ω–∞—Ü–µ–Ω–∫–∏ –Ω–∞ –∑–≤–µ–∑–¥—ã
@router.message(F.text, StateFilter("here_stars_markup"))
async def stars_markup_get(message: Message, bot: Bot, state: FSM, arSession: ARS):
    try:
        markup_value = int(message.text.strip())
        
        if markup_value < 0 or markup_value > 100:
            return await message.answer(
                "<b>‚ùå –û—à–∏–±–∫–∞! –ù–∞—Ü–µ–Ω–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 0 –¥–æ 100%</b>\n"
                "‚≠ê –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –Ω–∞—Ü–µ–Ω–∫–∏ –Ω–∞ –∑–≤–µ–∑–¥—ã"
            )
        
        old_markup = Settingsx.get().stars_markup
        await state.clear()
        
        Settingsx.update(stars_markup=markup_value)
        
        get_user = Userx.get(user_id=message.from_user.id)
        
        await send_admins(
            bot,
            f"üë§ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä <a href='tg://user?id={get_user.user_id}'>{get_user.user_name}</a>\n"
            f"‚≠ê –ò–∑–º–µ–Ω–∏–ª –Ω–∞—Ü–µ–Ω–∫—É –Ω–∞ –∑–≤–µ–∑–¥—ã: {old_markup}% ‚Üí {markup_value}%",
            not_me=get_user.user_id,
        )
        
        await message.answer(
            f"<b>‚úÖ –ù–∞—Ü–µ–Ω–∫–∞ –Ω–∞ –∑–≤–µ–∑–¥—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞!</b>\n"
            f"‚ñ™Ô∏è –°—Ç–∞—Ä–∞—è –Ω–∞—Ü–µ–Ω–∫–∞: <code>{old_markup}%</code>\n"
            f"‚ñ™Ô∏è –ù–æ–≤–∞—è –Ω–∞—Ü–µ–Ω–∫–∞: <code>{markup_value}%</code>",
            reply_markup=stars_markup_finl(),
        )
        
    except ValueError:
        await message.answer(
            "<b>‚ùå –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ</b>\n"
            "‚≠ê –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –Ω–∞—Ü–µ–Ω–∫–∏ –Ω–∞ –∑–≤–µ–∑–¥—ã"
        )
